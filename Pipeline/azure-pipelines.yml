

resources:
  containers:
    - container: sqlserver
      image: mcr.microsoft.com/mssql/server:2022-latest
      networks: 
      - testes
      env:
        SA_PASSWORD: SqlServer2022!
        ACCEPT_EULA: Y
        MSSQL_PID: Developer
      ports:
        - 1433:1433

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Variáveis para execução dos testes de integração
  Path_ScriptsSqlServer: './Scripts'
  Path_Tests: './BenchmarkingDapperEFCoreCRM'
  BaseEFCore: 'Server=127.0.0.1,1433;Database=BaseCRMEF;User Id=sa;Password=SqlServer2022!;TrustServerCertificate=True;'
  BaseDapper: 'Server=127.0.0.1,1433;Database=BaseCRMDapper;User Id=sa;Password=SqlServer2022!;TrustServerCertificate=True;'
  Path_ArtifactsBenchmarking: '/BenchmarkingDapperEFCoreCRM/BenchmarkDotNet.Artifacts/results'
  ArtifactBenchmarkingHtml: 'BenchmarkingDapperEFCoreCRM.Tests.CRMTests-report.html'
  ArtifactBenchmarkingMarkdown: 'BenchmarkingDapperEFCoreCRM.Tests.CRMTests-report-github.md'

stages:
- stage: Tests
  displayName: Tests stage
  variables:
    - group: benchmarkdotnet
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: $(vmImageName)
    services:
      sqlserver: sqlserver
    steps:
    - script: |
        docker images
        docker container ls
        echo 'Aguardar por 10s a subida da instancia do SQL Server...'
        sleep 10s
        docker container ls
      displayName: Exibir imagens e container em execução
    - script: |
        /opt/mssql-tools/bin/sqlcmd -S "127.0.0.1,1433" -U sa -P SqlServer2022! -d master -i $(Path_ScriptsSqlServer)/BaseCRMEF.sql
      displayName: Criar banco BaseCRMEF
    - script: |
        /opt/mssql-tools/bin/sqlcmd -S "127.0.0.1,1433" -U sa -P SqlServer2022! -d master -i $(Path_ScriptsSqlServer)/BaseCRMDapper.sql
      displayName: Criar banco BaseCRMDapper
    - script: |
        echo '*** SDKs do .NET intalados ***'
        dotnet --list-sdks
        echo '*** Versão assumida como default para o .NET ***'
        dotnet --version
      displayName: Exibir versoes instaladas do .NET SDK
    - script: |
        cd $(Path_Tests)
        ls
        dotnet run --filter BenchmarkingDapperEFCoreCRM.Tests.* -c Release
      displayName: Executar benchmarking com testes de performance - Entity Framework Core x Dapper
      env:
        BaseEFCoreConnectionString: $(BaseEFCore)
        BaseDapperConnectionString: $(BaseDapper)
        NumeroContatosPorCompanhia: $(NoContatosPorCompanhia)
    - task: PublishHtmlReport@1
      inputs:
        reportDir: '$(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)/$(ArtifactBenchmarkingHtml)'
      displayName: Publicar resultado no formato HTML
    - task: PublishMarkdownReports@1
      inputs:
        contentPath: '$(Build.SourcesDirectory)/$(Path_ArtifactsBenchmarking)'
        indexFile: '$(ArtifactBenchmarkingMarkdown)'
      displayName: Publicar resultado no formato Markdown
    - script: |
        cd /opt/mssql-tools/bin/
        echo '*** Empresas ***'
        sqlcmd -S "127.0.0.1,1433" -U sa -P SqlServer2022! -d master -Q "USE BaseCRMEF; SELECT TOP 10 * FROM dbo.Empresas;"
        echo ''
        echo '*** Contatos ***'
        sqlcmd -S "127.0.0.1,1433" -U sa -P SqlServer2022! -d master -Q "USE BaseCRMEF; SELECT TOP 30 * FROM dbo.Contatos;"
      condition: always() 
      displayName: Exibir amostragem de registros criados na base BaseCRMEF
    - script: |
        cd /opt/mssql-tools/bin/
        echo '*** Empresas ***'
        sqlcmd -S "127.0.0.1,1433" -U sa -P SqlServer2022! -d master -Q "USE BaseCRMDapper; SELECT TOP 10 * FROM dbo.Empresas;"
        echo ''
        echo '*** Contatos ***'
        sqlcmd -S "127.0.0.1,1433" -U sa -P SqlServer2022! -d master -Q "USE BaseCRMDapper; SELECT TOP 30 * FROM dbo.Contatos;"
      condition: always() 
      displayName: Exibir amostragem de registros criados na base BaseCRMDapper